openapi: 3.0.3
info:
  title: External API
  description: External API
  version: 1.0.0
servers:
  - url: "http//127.0.0.1:8080/"
paths:

  /ping:
    get:
      responses:
        200:
          description: API healthy and ready
          content:
            application/json:
              schema:
                type: string

  /service:
    get:
      responses:
        200:
          description: returns services list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/service'

  /source:
    post:
      tags:
        - system
      parameters:
        - { in: query, name: title,   required: true, schema: { type: string } }
        - { in: query, name: kind,    required: true, schema: { type: string } }
        - { in: query, name: address, required: true, schema: { type: string } }
      responses:
        200:
          description: successful registration
          content:
            application/json:
              schema:
                type: string
    get:
      responses:
        200:
          description: returns sources list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/source'

  /criteria:
    post:
      tags:
        - system
      parameters:
        - { in: query, name: service,   required: true, schema: { type: string } }
        - { in: query, name: title,     required: true, schema: { type: string } }
        - { in: query, name: selector,  required: true, schema: { type: string } }
        - { in: query, name: direction, required: true, schema: { type: string } }
        - { in: query, name: interval,  required: true, schema: { type: string } }
      responses:
        200:
          description: successful registration
          content:
            application/json:
              schema:
                type: string
  /release:
    post:
      tags:
        - system
      parameters:
        - { in: query, name: service,  required: true,  schema: { type: string } }
        - { in: query, name: tag,      required: true,  schema: { type: string } }
        - { in: query, name: start_at, required: false, schema: { type: integer, format: int64 } }
      responses:
        200:
          description: successful registration
          content:
            application/json:
              schema:
                type: string
    get:
      parameters:
        - { in: query, name: service, required: true, schema: { type: string, minLength: 1 } }
      responses:
        200:
          description: returns releases for specified service
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/release'



  /report/compare:
    post:
      tags:
        - report
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportCompareRequest'
      responses:
        200:
          description: return measurement pairs for two releases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportCompareResponse'


components:
  schemas:

    ErrorResponse:
      type: object
      required: [ errors ]
      properties:
        errors:
          type: array
          items:
            type: string

    ReportCompareRequest:
      type: object
      required: [ service, source, tag_one, tag_two, time_range ]
      properties:
        service: { type: string }
        source: { type: string }
        tag_one: { type: string }
        tag_two: { type: string }
        time_range:
          $ref: '#/components/schemas/reportTimeRange'
    reportTimeRange:
      type: string
      enum:
        - 1h
        - 6h
        - 1d
        - 7d

    ReportCompareResponse:
      type: array
      items:
        $ref: '#/components/schemas/criteriaReport'
    criteriaReport:
      required: [ title, selector, graph, direction ]
      properties:
        title: { type: string }
        selector: { type: string }
        graph:
          type: array
          items:
            $ref: '#/components/schemas/graphItem'
        direction:
          type: string
          enum: [ equal, increase, decrease ]
    graphItem:
      required: [ t1, v1, t2, v2 ]
      properties:
        t1: { type: integer, format: int64 }
        v1: { type: number, format: double }
        t2: { type: integer, format: int64 }
        v2: { type: number, format: double }

    service:
      required: [ title ]
      properties:
        title: { type: string }
    source:
      required: [ id, kind, address ]
      properties:
        id: { type: string }
        kind:
          type: string
          enum:
            - prometheus
            - influxdb
        address: { type: string }
    release:
      required: [ tag, from, till ]
      properties:
        tag: { type: string }
        from: { type: integer, format: int64 }
        till: { type: integer, format: int64 }

